unit MainUnit;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Mask, Vcl.ExtCtrls, System.JSON.Serializers,
  System.JSON, System.JSON.Types, Vcl.Menus;

type
  TSettings = record
    LeftClick  : Char;
    RightClick : Char;
    MoveUp     : Char;
    MoveDown   : Char;
    MoveLeft   : Char;
    MoveRight  : Char;
    MoveRange  : Integer;
  end;

  TMainForm = class(TForm)
    Button1: TButton;
    Button2: TButton;
    Label1: TLabel;
    LabeledEdit1: TLabeledEdit;
    LabeledEdit2: TLabeledEdit;
    LabeledEdit3: TLabeledEdit;
    LabeledEdit4: TLabeledEdit;
    LabeledEdit5: TLabeledEdit;
    LabeledEdit6: TLabeledEdit;
    TrayIcon1: TTrayIcon;
    PopupMenu1: TPopupMenu;
    N1: TMenuItem;
    LabeledEdit7: TLabeledEdit;
    procedure Button1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure LabeledEdit1KeyPress(Sender: TObject; var Key: Char);
    procedure TrayIcon1DblClick(Sender: TObject);
    procedure N1Click(Sender: TObject);
  private
    { Private 宣言 }
    FSettings: TSettings;
    FTempCode: Integer;
    procedure LoadSettings(const FileName: string);
    procedure SaveSettings(const FileName: string);
  public
    { Public 宣言 }
  protected
    procedure WMApp100(var Message: TMessage); message WM_APP+100;
    procedure WMApp110(var Message: TMessage); message WM_APP+110;
  end;

var
  MainForm: TMainForm;

function StartMouseKeyHook(Wnd: HWND): HHOOK; stdcall; external 'PLMOUSEKEYHOOK.DLL';
procedure StopMouseKeyHook; stdcall; external 'PLMOUSEKEYHOOK.DLL';

implementation

{$R *.dfm}

{ TForm1 }

procedure TMainForm.Button1Click(Sender: TObject);
begin
  MainForm.Hide;
end;

procedure TMainForm.FormCreate(Sender: TObject);
begin
  StartMouseKeyHook(Handle);
  LoadSettings(ChangeFileExt(Application.ExeName, '.ini'));
  FTempCode := 0;
end;

procedure TMainForm.FormDestroy(Sender: TObject);
begin
  StopMouseKeyHook;
  SaveSettings(ChangeFileExt(Application.ExeName, '.ini'));
end;

procedure TMainForm.LabeledEdit1KeyPress(Sender: TObject; var Key: Char);
begin
  TLabeledEdit(Sender).Text := '';
  if CharInSet(Key, ['a'..'z']) then
  begin
    TLabeledEdit(Sender).Text := UpperCase(Char(Key));
  end;
  Key := #0;
end;

procedure TMainForm.LoadSettings(const FileName: string);
var
  Js: TJsonSerializer;
  List: TStringList;

begin
  if not FileExists(FileName) then
  begin
    FSettings.LeftClick  := 'U';
    FSettings.RightClick := 'H';
    FSettings.MoveUp     := 'L';
    FSettings.MoveDown   := 'K';
    FSettings.MoveLeft   := 'J';
    FSettings.MoveRight  := 'I';
    FSettings.MoveRange  := 10;
    Exit;
  end;
  Js := TJsonSerializer.Create;
  List := TStringList.Create;
  try
    List.LoadFromFile(FileName);
    FSettings := Js.Deserialize<TSettings>(List.Text);
  finally
    Js.Free;
    List.Free;
  end;
end;

procedure TMainForm.N1Click(Sender: TObject);
begin
  Application.Terminate;
end;

procedure TMainForm.SaveSettings(const FileName: string);
var
  Js: TJsonSerializer;
  List: TStringList;

begin
  Js := TJsonSerializer.Create;
  List := TStringList.Create;
  try
    Js.Formatting := TJsonFormatting.Indented;
    var Json := Js.Serialize<TSettings>(FSettings);
    List.Text := Json;
    List.SaveToFile(FileName);
  finally
    Js.Free;
    List.Free;
  end;
end;

procedure TMainForm.TrayIcon1DblClick(Sender: TObject);
begin
  LabeledEdit1.Text := UpperCase(FSettings.LeftClick);
  LabeledEdit2.Text := UpperCase(FSettings.RightClick);
  LabeledEdit3.Text := UpperCase(FSettings.MoveUp);
  LabeledEdit4.Text := UpperCase(FSettings.MoveDown);
  LabeledEdit5.Text := UpperCase(FSettings.MoveLeft);
  LabeledEdit6.Text := UpperCase(FSettings.MoveRight);
  LabeledEdit7.Text := UpperCase(FSettings.MoveRange.ToString);
  MainForm.Show;
end;

// DLL からグローバルフックしたマウス情報を受け取る
procedure TMainForm.WMApp100(var Message: TMessage);
begin

end;

// DLL からグローバルフックしたキーボード情報を受け取る
procedure TMainForm.WMApp110(var Message: TMessage);
var
  LIsDown: Boolean;
  LKey : WORD;
  LCode: Integer;
  IsShift: Boolean;
  IsCtrl : Boolean;
  IsAlt  : Boolean;
  MousePos: TPoint;

begin
  LIsDown := (Message.LParam and (1 shl 31)) = 0;
  if LIsDown then
  begin
    IsShift := (GetKeyState(VK_SHIFT)   and (1 shl 15)) <> 0;
    IsCtrl  := (GetKeyState(VK_CONTROL) and (1 shl 15)) <> 0;
    IsAlt   := (Message.LParam          and (1 shl 29)) <> 9;
    if IsCtrl and IsAlt then
    begin
      LKey  := Message.WParam;
      LCode := LKey and $FF;
      GetCursorPos(MousePos);
      if LCode <> FTempCode then
      begin
        if Chr(LCode) = FSettings.LeftClick  then
        begin
          mouse_event(MOUSEEVENTF_LEFTDOWN, MousePos.X, MousePos.Y, 0, 0);
          mouse_event(MOUSEEVENTF_LEFTUP, MousePos.X, MousePos.Y, 0, 0);
        end else
        if Chr(LCode) = FSettings.RightClick then
        begin
          mouse_event(MOUSEEVENTF_RIGHTDOWN, MousePos.X, MousePos.Y, 0, 0);
          mouse_event(MOUSEEVENTF_RIGHTUP, MousePos.X, MousePos.Y, 0, 0);
        end else
        if Chr(LCode) = FSettings.MoveUp     then
          Dec(MousePos.Y, FSettings.MoveRange)
        else
        if Chr(LCode) = FSettings.MoveDown   then
          Inc(MousePos.Y, FSettings.MoveRange)
        else
        if Chr(LCode) = FSettings.MoveLeft   then
          Dec(MousePos.X, FSettings.MoveRange)
        else
        if Chr(LCode) = FSettings.MoveRight  then
          Inc(MousePos.X, FSettings.MoveRange)
        else
        if (Chr(LCode) = 'k') and (FSettings.MoveRange < 100) then
          Inc(FSettings.MoveRange, 10)
        else
        if (Chr(LCode) = 'm') and (FSettings.MoveRange > 10) then
          Dec(FSettings.MoveRange, 10);
      end;
      Mouse.CursorPos := MousePos;
      FTempCode := LCode;
    end;
  end;
end;

end.
