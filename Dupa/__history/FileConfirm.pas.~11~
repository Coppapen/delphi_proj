unit FileConfirm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, ExplorerUtils;

type
  TConfirmType = (ctReplace, ctSkip, ctAddUndereBar, ctRename, ctCancel);

  TConfirmResult = record
    ConfirmType: TConfirmType;
    NewFileName: string;
  end;

  TConfirmForm = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Panel4: TPanel;
    Panel5: TPanel;
    Panel6: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Edit1: TEdit;
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure Edit1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private 宣言 }
    FConfirmResult: TConfirmResult;
    FIsRepeatSameOperation: Boolean;
    FOriginalFileName: string;
    FPanelIndex: Integer;
    function KeyToIndex(const Key: Char): Integer;
    procedure SetConfirmResult;
    procedure SetPanelForcus(const Index: Integer);
  public
    { Public 宣言 }
    procedure Init(const SrcFile, DestFile: string);
    property Result: TConfirmResult read FConfirmResult;
    property IsRepeatSameOperation: Boolean read FIsRepeatSameOperation;
  end;

var
  ConfirmForm: TConfirmForm;

implementation

{$R *.dfm}

uses
  MainUnit;

procedure TConfirmForm.Edit1KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  Dir: string;

begin
  if Key = VK_RETURN then
  begin
    Dir := ExtractFilePath(FOriginalFileName);
    if FileExists(Dir + Edit1.Text) then
      //
    else
    begin
      SetConfirmResult;
      Close;
    end;
  end;
end;

procedure TConfirmForm.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Shift = [] then
  begin
    case Key of
      VK_DOWN: Inc(FPanelIndex);
      VK_UP:   Inc(FPanelIndex);
      VK_RETURN:
        begin
          SetConfirmResult;
          Close;
        end;
      VK_ESCAPE:
        begin
          FConfirmResult.ConfirmType := ctCancel;
          Close;
        end;
    end;
    if (Key = VK_DOWN) or (Key = VK_UP) then
    begin
      if FPanelIndex < 1 then
        FPanelIndex := 1
      else
      if FPanelIndex > 4 then
        FPanelIndex := 4;
      SetPanelForcus(FPanelIndex);
    end;
    case Key of
      Ord('R'), Ord('S'), Ord('C'), Ord('F'):
      begin
        if FPanelIndex <> 4 then
          SetPanelForcus(KeyToIndex(Char(Key)));
      end;
    end;
  end;
  if ssShift in Shift then
  begin
    case Key of
      VK_RETURN:
        begin
          if FPanelIndex <> 3 then
          begin
            FIsRepeatSameOperation := True;
            SetConfirmResult;
            Close;
          end;
        end;
    end;
  end;
end;

procedure TConfirmForm.Init(const SrcFile, DestFile: string);
var
  p1, p2: TFileInfo;

begin
  Edit1.Enabled := False;
  Edit1.Text := ExtractFileName(DestFile);
  FIsRepeatSameOperation := False;
  FOriginalFileName := DestFile;
  p1 := GetFileProperty(SrcFile);
  p2 := GetFileProperty(DestFile);
  Label6.Caption := 'コピー元 : ' + FormatDateTime('[ yy/mm/dd hh:nn:sss ]', p1.LastWriteTime) +
    FormatFloat('#,##0', p1.FileSize) + ' Byte';
  Label7.Caption := 'コピー先 : ' + FormatDateTime('[ yy/mm/dd hh:nn:sss ]', p2.LastWriteTime) +
    FormatFloat('#,##0', p2.FileSize) + ' Byte';
  FPanelIndex := 1;
  SetPanelForcus(1);
end;

function TConfirmForm.KeyToIndex(const Key: Char): Integer;
const
  Keys = 'RSCF';

begin
  Result := Pos(Key, Keys);
end;

procedure TConfirmForm.SetConfirmResult;
begin
  case FPanelIndex of
    1: FConfirmResult.ConfirmType := ctReplace;
    2: FConfirmResult.ConfirmType := ctSkip;
    3: FConfirmResult.ConfirmType := ctAddUndereBar;
    4:
      begin
        FConfirmResult.ConfirmType := ctRename;
        FConfirmResult.NewFileName := Edit1.Text;
      end;
  end;
end;

procedure TConfirmForm.SetPanelForcus(const Index: Integer);
var
  i: Integer;

begin
  for i := 1 to 4 do
  begin
    TPanel(FindComponent('Panel' + i.ToString)).BevelInner := bvNone;
    TPanel(FindComponent('Panel' + i.ToString)).BevelOuter := bvNone;
  end;
  if Index = 4 then
  begin
    Edit1.Enabled := True;
    Edit1.SetFocus;
    Edit1.SelStart := Length(Edit1.Text);
  end else
    Edit1.Enabled := False;
  TPanel(FindComponent('Panel' + Index.ToString)).BevelInner := bvNone;
  TPanel(FindComponent('Panel' + Index.ToString)).BevelOuter := bvNone;
end;

end.
